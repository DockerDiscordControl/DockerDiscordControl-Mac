# Multi-Stage Build for optimized Docker images
# Stage 1: Build phase for dependencies and compilation
FROM python:3.11-slim AS builder

# Set working directory
WORKDIR /build

# Install build dependencies including SSL support
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    python3-dev \
    libssl-dev \
    libffi-dev \
    ca-certificates \
    openssl \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# First copy only requirements.txt for better cache utilization
COPY requirements.txt .

# Create .dockerignore file to avoid copying unnecessary files
RUN echo "**/__pycache__" > .dockerignore && \
    echo "**/*.pyc" >> .dockerignore && \
    echo ".git" >> .dockerignore && \
    echo "**/.DS_Store" >> .dockerignore

# Update pip and install packages in a virtual environment
RUN python -m venv /venv && \
    /venv/bin/pip install --no-cache-dir --upgrade pip && \
    echo "Trying to uninstall existing Discord packages..." && \
    /venv/bin/pip uninstall -y discord discord.py py-cord PyNaCl || echo "Uninstallation failed or packages not found, continuing..." && \
    echo "Trying to remove remaining site-packages directories..." && \
    rm -rf /venv/lib/python3.11/site-packages/discord && \
    rm -rf /venv/lib/python3.11/site-packages/discordpy && \
    rm -rf /venv/lib/python3.11/site-packages/pycord && \
    rm -rf /venv/lib/python3.11/site-packages/discord_py-* && \
    rm -rf /venv/lib/python3.11/site-packages/py_cord-* && \
    echo "Installing packages from requirements.txt..." && \
    /venv/bin/pip install --no-cache-dir -r requirements.txt && \
    echo "Installation completed. Checking installed packages..." && \
    /venv/bin/pip list | grep -i discord || echo "No Discord packages found in pip list."

# Create a compressed wheels directory for faster final image build
RUN /venv/bin/pip wheel --wheel-dir=/wheels -r requirements.txt

# Copy source code for compilation
COPY . /build/

# Compile Python files to bytecode for faster startup
RUN python -m compileall -b /build

# Stage 2: Final image
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/venv/bin:$PATH" \
    DOCKER_HOST="unix:///var/run/docker.sock"

# Install runtime dependencies and Docker CLI (in a single RUN to reduce layers)
RUN apt-get update && apt-get install -y --no-install-recommends \
    supervisor \
    curl \
    ca-certificates \
    gnupg \
    && curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(. /etc/os-release && echo $VERSION_CODENAME) stable" > /etc/apt/sources.list.d/docker.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends docker-ce-cli \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    # Ensure that both 'python' and 'python3' commands are available for compatibility
    && ln -sf /usr/local/bin/python3 /usr/local/bin/python

# Copy the virtual environment from the builder
COPY --from=builder /venv /venv

# Install pre-built wheels
COPY --from=builder /wheels /wheels
RUN pip install --no-cache-dir --no-index --find-links=/wheels /wheels/* && \
    rm -rf /wheels

# Copy compiled code and assets (exclude development files)
COPY --from=builder /build /app

# Remove unnecessary files to reduce image size
RUN find /app -name "*.py" -not -path "*/app/*" -delete && \
    find /app -name "*.pyc" -not -path "*/app/*" -delete && \
    rm -rf /app/.git /app/.github /app/tests /app/venv

# Copy supervisor configuration to the correct location
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create configuration and logs directories with correct permissions
RUN mkdir -p /app/config /app/logs /app/app/logs /app/scripts /app/heartbeat_monitor && \
    chmod 777 /app/config /app/logs /app/app/logs

# Copy scripts
COPY scripts/fix_permissions.sh /app/scripts/
RUN chmod +x /app/scripts/fix_permissions.sh

# Copy heartbeat monitor
COPY heartbeat_monitor/ddc_heartbeat_monitor.py /app/heartbeat_monitor/

# Expose port for Web UI
EXPOSE 9374

# Set entry point to supervisord
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
